# Run Tests
name: Run Tests

on:
  # # Run the workflow nightly at 0000 UTC
  # schedule:
  #   - cron: '0 0 * * *'

  # Allow running the workflow manually from the Actions tab
  # All jobs are excluded by default, desired jobs must be selected
  workflow_dispatch:

    inputs:

      project_name:
        description: 'Enter the name of the project to test:'
        type: string
        required: false
        default: ''

      debug_enabled:
        type: boolean
        description: 'Enable tmate debugging (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false


permissions: {}

jobs:

  get_projects:
    runs-on: ubuntu-latest

    outputs:
      project_list: ${{ steps.list_projects.outputs.project_list }}

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Get list of projects
        id: list_projects
        run: |
          cd $GITHUB_WORKSPACE/runner
          if [ -n "${{ inputs.project_name }}" ]; then
            PROJECTS='[ "${{ inputs.project_name }}" ]'
          else
            PROJECTS=`python -c 'import os; import json; files = os.listdir("."); print(json.dumps([f for f in files if f.endswith(".json")]))'`
          fi
          echo "project_list='$PROJECTS'"
          echo "project_list='$PROJECTS'" >>$GITHUB_ENV
          echo "cat GITHUB_ENV:"
          cat $GITHUB_ENV

  job1:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: echo "matrix={\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}" >> $GITHUB_OUTPUT

  job2:
    needs: job1
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.job1.outputs.matrix) }}
    steps:
      - run: echo "Matrix - Project ${{ matrix.project }}, Config ${{ matrix.config }}"

  job3:
    needs: get_projects
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.get_projects.outputs.project_list) }}
    steps:
      - run: echo "Matrix - Project ${{ matrix.project }}, Config ${{ matrix.config }}"

  test_project:
    needs: get_projects

    timeout-minutes: 300

    runs-on: ubuntu-latest

    strategy:
      matrix:
        project_name: ${{fromJson(needs.get_projects.outputs.project_list)}}

    steps:

      - name: create SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: checkout code
        uses: actions/checkout@v4

      - name: setup conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge
          auto-activate-base: true
          activate-environment: ""

      - name: test ${{ matrix.project_name }}
        env:
          PROJECT_NAME: ${{ matrix.project_name }}
        run: |
          cd $GITHUB_WORKSPACE/runner

          echo "============================================================="
          echo "Fetch database for $PROJECT_NAME"
          echo "============================================================="
          mkdir data
          cd data
          wget -q openmdao.org/benchmark/test/data/$PROJECT_NAME.db
          cd ..

          echo "============================================================="
          echo "Fetch SNOPT source if needed"
          echo "============================================================="
          SNOPT_DIR=`grep snopt $PROJECT_NAME.json | awk -F ' ' '{print $NF}' | tr -d '"'`
          SNOPT_DIR="${SNOPT_DIR/\~/$HOME}"
          echo "$SNOPT_DIR"
          if [ -n "$SNOPT_DIR" ]; then
            mkdir -p $SNOPT_DIR
            scp -qr ${{ secrets.SNOPT_LOCATION }} $SNOPT_DIR
          fi

          echo "============================================================="
          echo "Test $PROJECT_NAME"
          echo "============================================================="
          pip install slack_sdk matplotlib
          ls -l data
          python benchmark.py -u $PROJECT_NAME
          ls -l data

      - name: Setup tmate session
        if: inputs.debug_enabled && failure()
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
